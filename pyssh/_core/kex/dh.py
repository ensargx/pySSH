import secrets
# from ..hash import Hash

from Crypto.Hash import SHA1
from Crypto.Hash.SHA1 import SHA1Hash

class DHGroup1SHA1:
    """Diffie-Hellman Group 1 Key Exchange with SHA-1"""
    name = b'diffie-hellman-group1-sha1'
    p = 179769313486231590770839156793787453197860296048756011706444423684197180216158519368947833795864925541502180565485980503646440548199239100050792877003355816639229553136239076508735759914822574862575007425302077447712589550957937778424442426617334727629299387668709205606050270810842907692932019128194467627007
    g = 2
    q = 89884656743115795385419578396893726598930148024378005853222211842098590108079259684473916897932462770751090282742990251823220274099619550025396438501677908319614776568119538254367879957411287431287503712651038723856294775478968889212221213308667363814649693834354602803025135405421453846466009564097233813503

    def __init__(self, e: int):
        self.e = e
        self.y = secrets.randbelow(self.q - 1) + 1
        self.f = pow(self.g, self.y, self.p)
        self.k = pow(self.e, self.y, self.p)

    @staticmethod
    def hash(data: bytes) -> SHA1Hash:
        return SHA1.new(data)

class DHGroup14SHA1:
    """Diffie-Hellman Group 14 Key Exchange with SHA-1"""
    name = b'diffie-hellman-group14-sha1'
    p = 32317006071311007300338913926423828248817941241140239112842009751400741706634354222619689417363569347117901737909704191754605873209195028853758986185622153212175412514901774520270235796078236248884246189477587641105928646099411723245426622522193230540919037680524235519125679715870117001058055877651038861847280257976054903569732561526167081339361799541336476559160368317896729073178384589680639671900977202194168647225871031411336429319536193471636533209717077448227988588565369208645296636077250268955505928362751121174096972998068410554359584866583291642136218231078990999448652468262416972035911852507045361090559
    g = 2
    q = 16158503035655503650169456963211914124408970620570119556421004875700370853317177111309844708681784673558950868954852095877302936604597514426879493092811076606087706257450887260135117898039118124442123094738793820552964323049705861622713311261096615270459518840262117759562839857935058500529027938825519430923640128988027451784866280763083540669680899770668238279580184158948364536589192294840319835950488601097084323612935515705668214659768096735818266604858538724113994294282684604322648318038625134477752964181375560587048486499034205277179792433291645821068109115539495499724326234131208486017955926253522680545279

    def __init__(self, e: int):
        self.e = e
        self.y = secrets.randbelow(self.q - 1) + 1
        self.f = pow(self.g, self.y, self.p)
        self.k = pow(self.e, self.y, self.p)

    @staticmethod
    def hash(data: bytes) -> SHA1Hash:
        return SHA1.new(data)
